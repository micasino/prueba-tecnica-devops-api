// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	"mg-inc-devops/pkg/config"
	"mg-inc-devops/pkg/db"
	"mg-inc-devops/pkg/http"
	"mg-inc-devops/pkg/http/handler"
	repository4 "mg-inc-devops/pkg/services/devops/repository"
	usecase4 "mg-inc-devops/pkg/services/devops/usecase"
	repository3 "mg-inc-devops/pkg/services/rol/repository"
	usecase3 "mg-inc-devops/pkg/services/rol/usecase"
	repository2 "mg-inc-devops/pkg/services/rol_usuario/repository"
	usecase2 "mg-inc-devops/pkg/services/rol_usuario/usecase"
	"mg-inc-devops/pkg/services/user/repository"
	"mg-inc-devops/pkg/services/user/usecase"
)

// Injectors from wire.go:

func InitializeAPI(cfg config.Config) (*http.ServerHTTP, error) {
	gormDB, err := db.ConnectDatabase(cfg)
	if err != nil {
		return nil, err
	}
	userRepository := repository.NewUserRepository(gormDB)
	userUseCase := usecase.NewUserUseCase(userRepository)
	rol_UsuarioRepository := repository2.NewRol_UsuarioRepository(gormDB)
	rol_UsuarioUseCase := usecase2.NewRol_UsuarioUseCase(rol_UsuarioRepository)
	userHandler := handler.NewUserHandler(userUseCase, rol_UsuarioUseCase)
	rolRepository := repository3.NewRolRepository(gormDB)
	rolUseCase := usecase3.NewRolUseCase(rolRepository)
	rolHandler := handler.NewRolHandler(rolUseCase)
	devopsRepository := repository4.NewDevopsRepository(gormDB)
	devopsUseCase := usecase4.NewDevopsUseCase(devopsRepository)
	devopsHandler := handler.NewDevopsHandler(devopsUseCase)
	serverHTTP := http.NewServerHTTP(userHandler, rolHandler, devopsHandler)
	return serverHTTP, nil
}
