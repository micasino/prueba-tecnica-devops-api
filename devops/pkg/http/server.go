package http

import (
	"github.com/gin-gonic/gin"
	swaggerfiles "github.com/swaggo/files"
	ginSwagger "github.com/swaggo/gin-swagger"

	"mg-inc-devops/cmd/api/docs"
	handler "mg-inc-devops/pkg/http/handler"
	middleware "mg-inc-devops/pkg/http/middleware"
	// docs is generated by Swag CLI, you have to import it.
)

type ServerHTTP struct {
	engine *gin.Engine
}

func NewServerHTTP(
	userHandler *handler.UserHandler,
	rolHandler *handler.RolHandler,
	devopsHandler *handler.DevopsHandler) *ServerHTTP {

	// programmatically set swagger info
	docs.SwaggerInfo.Title = "Swagger API"
	docs.SwaggerInfo.Description = "This is a sample server Devops server."
	docs.SwaggerInfo.Version = "1.0"
	docs.SwaggerInfo.Host = "localhost:3000"
	docs.SwaggerInfo.BasePath = "/api/v1"
	docs.SwaggerInfo.Schemes = []string{"http", "https"}
	engine := gin.New()

	// Use logger from Gin
	engine.Use(gin.Logger())
	engine.Use(CORS())

	apiV1 := engine.Group("/api/v1")
	// Swagger docs
	apiV1.GET("/swagger/*any", ginSwagger.WrapHandler(swaggerfiles.Handler))

	// Request JWT
	apiuth := apiV1.Group("/auth")
	apiuth.POST("/login", userHandler.LoginHandler)
	apiuth.POST("/signUp", userHandler.SignUp)
	apiuth.POST("/refresh-token", userHandler.RefreshToken)

	// Auth middleware users
	apiUsers := apiV1.Group("/users", middleware.AuthorizationMiddleware)
	apiUsers.GET("", userHandler.FindAll)
	apiUsers.GET("/:id", userHandler.FindByID)
	apiUsers.GET("/:id/roles", userHandler.FindByIDWithRole)
	//api.POST("users", userHandler.Save)
	apiUsers.DELETE("/:id", userHandler.Delete)
	apiUsers.DELETE("/:id/roles", userHandler.DeleteRoles)

	// Auth middleware servicio
	apiDevops := apiV1.Group("/devops", middleware.AuthorizationMiddleware)
	apiDevops.GET("", middleware.PaginationMiddleware, devopsHandler.FindAll)
	apiDevops.GET("/:id", devopsHandler.FindByID)
	apiDevops.POST("save", devopsHandler.Save)
	apiDevops.PUT("update/:id", devopsHandler.Update)
	apiDevops.DELETE("/:id", devopsHandler.Delete)

	// Auth middleware Rol
	apiRol := apiV1.Group("/rol", middleware.AuthorizationMiddleware)
	apiRol.GET("", rolHandler.FindAll)
	apiRol.GET("/:id", rolHandler.FindByID)
	apiRol.POST("save", rolHandler.Save)
	apiRol.PUT("update/:id", rolHandler.Update)
	apiRol.DELETE("/:id", rolHandler.Delete)

	return &ServerHTTP{engine: engine}
}

func (sh *ServerHTTP) Start() {
	sh.engine.Run(":3000")
}

func CORS() gin.HandlerFunc {
	return func(c *gin.Context) {

		//fmt.Println(c.Request.Header)
		c.Writer.Header().Set("Access-Control-Allow-Origin", "*")
		c.Writer.Header().Set("Access-Control-Allow-Credentials", "true")
		c.Writer.Header().Set("Access-Control-Allow-Headers", "Content-Type, Content-Length, Accept-Encoding, X-CSRF-Token, Authorization, accept, Origin, Cache-Control, X-Requested-With")
		c.Writer.Header().Set("Access-Control-Allow-Methods", "POST, OPTIONS, GET, PUT, DELETE")
		//c.Writer.Header().Set("Access-Control-Allow-Methods", "PUT, DELETE")

		c.Next()
	}
}
